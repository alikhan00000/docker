pipeline {
    agent any
    stages {
        stage('act version') {
            steps {
                script {
                    sh 'act --version'
                }
            }
        }
       stage('run piepline') {
    steps {
            script {
               sh 'acy'
            }
        }
    }




        stage('List S3 Buckets') {
            steps {
                 script {
                    sh 'act -l'
                 }
             }
         }
        // Uncomment the clone stage if needed
        // stage('Clone GitHub Repository') {
        //     steps {
        //         withCredentials([usernamePassword(credentialsId: '63973772-11d7-437e-8774-a35c98d23af9', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
        //             script {
        //                 // Clone the entire repository
        //                 bat """
        //                 git clone https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/alikhan00000/docker.git
        //                 """
        //             }
        //         }
        //     }
        // }
        // stage('Generate Deployment Package') {
        //     steps {
        //         script {
        //             // Use PowerShell to zip contents inside the 'docker' folder
        //             powershell '''
        //             # Define paths
        //             $sourceDir = "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\docker9\\docker"
        //             $zipFile = "${env.WORKSPACE}\\BookAppFrontend.zip"
                    
        //             # Echo the paths
        //             echo "Source directory: $sourceDir"
        //             echo "Zip file path: $zipFile"
        
        //             # Change directory to 'docker'
        //             Set-Location -Path $sourceDir
        //             echo "Current directory: $(Get-Location)"
        
        //             # Create a temporary directory
        //             $tempDir = New-Item -ItemType Directory -Path "$env:TEMP\\$(New-Guid)"
        //             echo "Temporary directory: $tempDir"
        
        //             # Copy contents of 'docker' folder to temp directory
        //             Copy-Item -Path "$sourceDir\\*" -Destination $tempDir.FullName -Recurse
        //             echo "Copied contents to: $($tempDir.FullName)"
        
        //             # Create zip file from temp directory
        //             Compress-Archive -Path "$tempDir\\*" -DestinationPath $zipFile -Force
        //             echo "Created zip file: $zipFile"
        
        //             # Remove temp directory
        //             Remove-Item -Path $tempDir -Recurse -Force
        //             echo "Removed temporary directory: $tempDir"
        //             '''
        //         }
        //     }
        // }
        // stage('Fix Backslashes in Zip') {
        //     steps {
        //         script {
        //             powershell '''
        //                 $zipPath = "C:\\BookAppFrontend.zip"
        //                 $tempPath = "C:\\temp_fixed.zip"
        
        //                 Add-Type -AssemblyName System.IO.Compression.FileSystem
        //                 $archive = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
        //                 $tempArchive = [System.IO.Compression.ZipFile]::Open($tempPath, 'Create')
        
        //                 foreach ($entry in $archive.Entries) {
        //                     $newName = $entry.FullName -replace '\\\\', '/'
        //                     Write-Output "Processing entry: $($entry.FullName) -> $newName"
                            
        //                     $tempEntry = $tempArchive.CreateEntry($newName)
        //                     $tempStream = $tempEntry.Open()
        //                     $stream = $entry.Open()
        //                     $stream.CopyTo($tempStream)
        //                     $tempStream.Close()
        //                     $stream.Close()
        //                 }
        
        //                 $archive.Dispose()
        //                 $tempArchive.Dispose()
        
        //                 Remove-Item -Path $zipPath -Force
        //                 Move-Item -Path $tempPath -Destination $zipPath -Force
        
        //                 Write-Output "Zip file paths fixed."
        //             '''
        //         }
        //     }
        // }
    //   stage('Get Timestamp') {
    //         steps {
    //             script {
    //                 // Get the current timestamp using PowerShell
    //               def timestamp = powershell(returnStdout: true, script: '''
    //                     $timestamp = Get-Date -Format "yyyy-MM-ddTHH-mm-ss-fffZ"
    //                     return $timestamp
    //                 ''').trim()
    //                 env.TIMESTAMP = timestamp
    //                 env.VERSION_LABEL = "Sample-${env.TIMESTAMP}"
    //                 echo "Version Label: ${env.VERSION_LABEL}"
    //             }
    //         }
    //     }
    //     stage('Upload to S3') {
    //         steps {
    //             script {
    //                 bat """
    //                     aws s3 cp C:\\BookAppFrontend.zip s3://elasticbeanstalk-us-east-1-211125344531/docker3/BookAppFrontend.zip
    //                 """
    //                 echo "Uploaded BookAppFrontend.zip to S3"
    //             }
    //         }
    //     }
    //     stage('Deploy to Elastic Beanstalk') {
    //         steps {
    //             script {
    //                 def versionLabel = "Sam-28-19-267Z"
    //                 bat """
    //                     aws elasticbeanstalk create-application-version ^
    //                         --application-name ${env.APPLICATION_NAME} ^
    //                         --version-label ${env.VERSION_LABEL} ^
    //                         --source-bundle S3Bucket=${env.S3_BUCKET},S3Key=docker3/BookAppFrontend.zip ^
    //                         --region ${env.REGION}
                            
    //                     aws elasticbeanstalk update-environment ^
    //                         --application-name ${env.APPLICATION_NAME} ^
    //                         --environment-name ${env.ENVIRONMENT_NAME} ^
    //                         --version-label ${env.VERSION_LABEL} ^
    //                         --region ${env.REGION}
    //                 """
    //                 echo "Elastic Beanstalk deployment initiated successfully with version ${env.VERSION_LABEL}"
    //             }
    //         }
    //     }

    //     stage('Deployment Confirmation') {
    //         steps {
    //             echo "App deployed to Elastic Beanstalk"
    //         }
    //     }


    }
}
